pipeline {
    agent any 

    stages {
        // Stage 1: Install dependencies for both backend and frontend
        stage('Install dependencies') {
            steps {
                script {
                    try {
                        sh 'cd LavoroBack && npm install'
                        sh 'cd LavoroFront && npm install'
                    } catch (error) {
                        echo "Error installing dependencies: ${error}"
                        currentBuild.result = 'FAILURE'
                        error("Failed to install dependencies")
                    }
                }
            }
        }

        // Stage 2: Run unit tests (Backend only)
        stage('Unit Test') {
            steps {
                script {
                    try {
                        sh 'cd LavoroBack && npm test'
                    } catch (error) {
                        echo "Error running unit tests: ${error}"
                        currentBuild.result = 'FAILURE'
                        error("Unit tests failed")
                    }
                }
            }
        }

        // Stage 3: Build application (Backend and Frontend)
        stage('Build application') {
            steps {
                script {
                    try {
                        // Build backend
                        sh 'cd LavoroBack && npm run build-dev || echo "No build-dev script found, skipping backend build"'
                        
                        // Build frontend
                        sh 'cd LavoroFront && npm run build'
                    } catch (error) {
                        echo "Error building application: ${error}"
                        currentBuild.result = 'FAILURE'
                        error("Build failed")
                    }
                }
            }
        }

        // Stage 4: SonarQube Analysis
        stage('SonarQube Analysis') {
            steps {
                script {
                    try {
                        def scannerHome = tool 'scanner'
                        withSonarQubeEnv {
                            sh "${scannerHome}/bin/sonar-scanner"
                        }
                    } catch (error) {
                        echo "Error during SonarQube analysis: ${error}"
                        currentBuild.result = 'FAILURE'
                        error("SonarQube analysis failed")
                    }
                }
            }
        }
    }
}