pipeline {
    agent any

    environment {
        registryCredentials = "Nexus" // Identifiants pour Nexus
        registry = "192.168.50.4:8083" // Adresse du registre Docker (Nexus)
        nexusUrl = "192.168.50.4:8081" // Adresse de l'interface Nexus
    }

    stages {
        // Stage 1: Install dependencies for both backend and frontend
        stage('Install dependencies') {
            steps {
                script {
                    try {
                        sh 'cd LavoroBack && npm install'
                        sh 'cd LavoroFront && npm install'
                    } catch (error) {
                        echo "Error installing dependencies: ${error}"
                        currentBuild.result = 'FAILURE'
                        throw new Exception("Failed to install dependencies")
                    }
                }
            }
        }

        // Stage 2: Run unit tests (Backend only)
        stage('Unit Test') {
            steps {
                script {
                    try {
                        // Vérifier si le script test existe
                        def hasTestScript = sh(script: 'cd LavoroBack && npm run | grep -q "test"', returnStatus: true) == 0

                        if (hasTestScript) {
                            sh 'cd LavoroBack && npm test'
                        } else {
                            echo "Warning: No test script found in package.json. Skipping tests."
                        }
                    } catch (Exception e) {
                        echo "Error running unit tests: ${e}"
                        currentBuild.result = 'FAILURE'
                        throw new Exception("Unit tests failed")
                    }
                }
            }
        }

        // Stage 3: Build application (Backend and Frontend)
        stage('Build application') {
            steps {
                script {
                    try {
                        // Build backend
                        sh 'cd LavoroBack && npm run build-dev || echo "No build-dev script found, skipping backend build"'

                        // Build frontend
                        sh 'cd LavoroFront && npm run build'
                    } catch (error) {
                        echo "Error building application: ${error}"
                        currentBuild.result = 'FAILURE'
                        throw new Exception("Build failed")
                    }
                }
            }
        }

        // Stage 4: SonarQube Analysis
     /*   stage('SonarQube Analysis') {
            steps {
                script {
                    def scannerHome = tool 'scanner'
                    withSonarQubeEnv('scanner') { // Nom correct de l'installation SonarQube dans Jenkins
                        sh "${scannerHome}/bin/sonar-scanner"
                    }
                }
            }
        }
*/
        // Stage 5: Building Docker images
        stage('Building Docker images') {
          steps{
                    script {
                            sh('docker-compose build')
                                    }
                        }
        }

        // Stage 6: Deploy to Nexus
stage('Deploy to Nexus') {
                        steps{
                           script {
                               try {
                                   // Debug information
                                   echo "Starting Nexus deployment with registry: ${registry}"
                                   echo "Nexus UI is at: http://${nexusUrl}"
                                   sh "docker images | grep ${registry}/nodemongoapp"

                                   // Test connectivity to Nexus
                                   sh "curl -s -f http://${nexusUrl} > /dev/null || (echo 'Cannot connect to Nexus UI' && exit 1)"
                                   echo "Successfully connected to Nexus UI"

                                   // Use withCredentials to explicitly handle Docker registry authentication
                                   withCredentials([usernamePassword(credentialsId: registryCredentials,
                                                                  usernameVariable: 'NEXUS_USER',
                                                                  passwordVariable: 'NEXUS_PASS')]) {
                                       // Try direct push without login (Nexus might be configured to allow anonymous pushes)
                                       sh "docker push ${registry}/nodemongoapp:5.0 || (echo 'Direct push failed, trying with login' && false)"

                                       // If we get here, push succeeded
                                       echo "Successfully pushed image to Nexus"
                                   }
                               } catch (Exception e) {
                                   echo "ERROR: Failed to push to Nexus: ${e.getMessage()}"
                                   // Removed getStackTrace() call that was causing security issues

                                   // Diagnostic information
                                   echo "Checking Docker configuration:"
                                   sh "docker info || echo 'Failed to get Docker info'"
                                   echo "Checking Nexus connectivity:"
                                   sh "curl -v http://${nexusUrl} || echo 'Cannot connect to Nexus UI'"
                                   echo "Checking Docker registry connectivity:"
                                   sh "curl -v http://${registry}/v2/ || echo 'Cannot connect to Docker registry'"

                                   echo "TROUBLESHOOTING TIPS:"
                                   echo "1. Verify Nexus is running and accessible at http://${nexusUrl}"
                                   echo "2. Verify Docker registry is properly configured in Nexus at port 8083"
                                   echo "3. Check if firewall is blocking connections to port 8083"
                                   echo "4. Verify Docker daemon can connect to external registries"

                                   currentBuild.result = 'FAILURE'
                                   error "Failed to push to Nexus: ${e.getMessage()}"
                               }
                           }
                        }
                    }

    } // Fin du bloc stages

    // Gestion des échecs
    post {
        failure {
            echo "Pipeline failed. Check the logs for more details."
        }
        success {
            echo "Pipeline succeeded. Deployment completed."
        }
    }
} // Fin du pipeline