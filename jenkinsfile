pipeline {
    agent any

    environment {
        registryCredentials = "Nexus" // Identifiants pour Nexus
        registry = "192.168.50.4:8083" // Adresse du registre Docker (Nexus)
        nexusUrl = "192.168.50.4:8081" // Adresse de l'interface Nexus
    }

    stages {
        // Stage 1: Install dependencies for both backend and frontend
        stage('Install dependencies') {
            steps {
                script {
                    try {
                        sh 'cd LavoroBack && npm install'
                        sh 'cd LavoroFront && npm install'
                    } catch (error) {
                        echo "Error installing dependencies: ${error}"
                        currentBuild.result = 'FAILURE'
                        throw new Exception("Failed to install dependencies")
                    }
                }
            }
        }

        // Stage 2: Run unit tests (Backend only)
        stage('Unit Test') {
            steps {
                script {
                    try {
                        // Vérifier si le script test existe
                        def hasTestScript = sh(script: 'cd LavoroBack && npm run | grep -q "test"', returnStatus: true) == 0

                        if (hasTestScript) {
                            sh 'cd LavoroBack && npm test'
                        } else {
                            echo "Warning: No test script found in package.json. Skipping tests."
                        }
                    } catch (Exception e) {
                        echo "Error running unit tests: ${e}"
                        currentBuild.result = 'FAILURE'
                        throw new Exception("Unit tests failed")
                    }
                }
            }
        }

        // Stage 3: Build application (Backend and Frontend)
        stage('Build application') {
            steps {
                script {
                    try {
                        // Build backend
                        sh 'cd LavoroBack && npm run build-dev || echo "No build-dev script found, skipping backend build"'

                        // Build frontend
                        sh 'cd LavoroFront && npm run build'
                    } catch (error) {
                        echo "Error building application: ${error}"
                        currentBuild.result = 'FAILURE'
                        throw new Exception("Build failed")
                    }
                }
            }
        }

        // Stage 4: SonarQube Analysis
     /*   stage('SonarQube Analysis') {
            steps {
                script {
                    def scannerHome = tool 'scanner'
                    withSonarQubeEnv('scanner') { // Nom correct de l'installation SonarQube dans Jenkins
                        sh "${scannerHome}/bin/sonar-scanner"
                    }
                }
            }
        }
*/
        // Stage 5: Building Docker images
        stage('Building Docker images') {
          steps{
                    script {
                            sh('docker-compose build')
                                    }
                        }
        }

        // Stage 6: Deploy to Nexus
stage('Deploy to Nexus') {
                        steps{
                           script {
                               try {
                                   // Debug information
                                   echo "Starting Nexus deployment with registry: ${registry}"
                                   echo "Nexus UI is at: http://${nexusUrl}"
                                   sh "docker images | grep ${registry}/nodemongoapp"

                                   // Test connectivity to Nexus UI
                                   sh "curl -s -f http://${nexusUrl} > /dev/null || (echo 'Cannot connect to Nexus UI' && exit 1)"
                                   echo "Successfully connected to Nexus UI"

                                   // Test connectivity to Docker registry
                                   echo "Testing connectivity to Docker registry at http://${registry}"
                                   sh "curl -s -f http://${registry} || echo 'Warning: Cannot connect directly to Docker registry port'"

                                   // Check if Docker daemon is configured for insecure registries
                                   sh "docker info | grep 'Insecure Registries'"

                                   // ALTERNATIVE APPROACH: Save image to tar and upload to Nexus REST API
                                   echo "Trying alternative approach: Save image to tar and upload to Nexus"

                                   // Save the Docker image to a tar file
                                   sh "docker save -o nodemongoapp.tar ${registry}/nodemongoapp:5.0"
                                   echo "Docker image saved to tar file"

                                   // Upload the tar file to Nexus raw repository using curl
                                   withCredentials([usernamePassword(credentialsId: registryCredentials,
                                                                  usernameVariable: 'NEXUS_USER',
                                                                  passwordVariable: 'NEXUS_PASS')]) {
                                       // Create a raw repository URL (assuming 'docker-images' raw repository exists)
                                       echo "Uploading tar file to Nexus raw repository"
                                       sh "curl -v -u \${NEXUS_USER}:\${NEXUS_PASS} --upload-file nodemongoapp.tar http://${nexusUrl}/repository/docker-images/nodemongoapp-5.0.tar || echo 'Upload to raw repository failed'"

                                       // Try direct push again as a last resort
                                       echo "Trying direct push to Docker registry as last resort"
                                       sh "docker push ${registry}/nodemongoapp:5.0 || echo 'Direct push still failing'"
                                   }

                                   echo "Deployment process completed. Check logs for success/failure details."
                               } catch (Exception e) {
                                   echo "ERROR: Failed to push to Nexus: ${e.getMessage()}"

                                   // Detailed diagnostic information
                                   echo "\n==== DETAILED DIAGNOSTICS ===="
                                   echo "1. Docker Images:"
                                   sh "docker images"

                                   echo "\n2. Docker Info:"
                                   sh "docker info"

                                   echo "\n3. Network Connectivity to Nexus UI:"
                                   sh "ping -c 3 192.168.50.4 || echo 'Ping failed'"
                                   sh "curl -v http://${nexusUrl} || echo 'Cannot connect to Nexus UI'"

                                   echo "\n4. Network Connectivity to Docker Registry:"
                                   sh "curl -v http://${registry} || echo 'Cannot connect to Docker registry'"

                                   echo "\n5. Docker Daemon Configuration:"
                                   sh "cat /etc/docker/daemon.json || echo 'No daemon.json file found'"

                                   echo "\n==== TROUBLESHOOTING TIPS ===="
                                   echo "1. Verify Nexus is running: docker ps | grep sonarLavoro"
                                   echo "2. Check if port 8083 is exposed in your Nexus container"
                                   echo "3. Verify Docker registry is enabled in Nexus"
                                   echo "4. Add your registry to insecure-registries in /etc/docker/daemon.json"
                                   echo "5. Restart Docker daemon after configuration changes"
                                   echo "6. Check firewall settings for port 8083"

                                   currentBuild.result = 'FAILURE'
                                   error "Failed to deploy to Nexus. See diagnostics above."
                               }
                           }
                        }
                    }

    } // Fin du bloc stages

    // Gestion des échecs
    post {
        failure {
            echo "Pipeline failed. Check the logs for more details."
        }
        success {
            echo "Pipeline succeeded. Deployment completed."
        }
    }
} // Fin du pipeline